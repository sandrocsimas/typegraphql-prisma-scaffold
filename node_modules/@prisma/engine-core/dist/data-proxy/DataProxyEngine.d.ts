import { DMMF } from '@prisma/generator-helper';
import type { BatchQueryEngineResult, EngineConfig, EngineEventType, GetConfigResult, RequestBatchOptions, RequestOptions } from '../common/Engine';
import { Engine } from '../common/Engine';
import { Metrics, MetricsOptionsJson, MetricsOptionsPrometheus } from '../common/types/Metrics';
import { QueryEngineResult } from '../common/types/QueryEngine';
import type * as Tx from '../common/types/Transaction';
declare type DataProxyTxInfoPayload = {
    endpoint: string;
};
declare type DataProxyTxInfo = Tx.Info<DataProxyTxInfoPayload>;
export declare class DataProxyEngine extends Engine {
    private inlineSchema;
    readonly inlineSchemaHash: string;
    private inlineDatasources;
    private config;
    private logEmitter;
    private env;
    private clientVersion;
    readonly remoteClientVersion: Promise<string>;
    readonly headers: {
        Authorization: string;
    };
    readonly host: string;
    constructor(config: EngineConfig);
    version(): string;
    start(): Promise<void>;
    stop(): Promise<void>;
    on(event: EngineEventType, listener: (args?: any) => any): void;
    private url;
    getConfig(): Promise<GetConfigResult>;
    getDmmf(): Promise<DMMF.Document>;
    private uploadSchema;
    request<T>({ query, headers, transaction }: RequestOptions<DataProxyTxInfoPayload>): Promise<QueryEngineResult<T>>;
    requestBatch<T>({ queries, headers, transaction, }: RequestBatchOptions): Promise<BatchQueryEngineResult<T>[]>;
    private requestInternal;
    /**
     * Send START, COMMIT, or ROLLBACK to the Query Engine
     * @param action START, COMMIT, or ROLLBACK
     * @param headers headers for tracing
     * @param options to change the default timeouts
     * @param info transaction information for the QE
     */
    transaction(action: 'start', headers: Tx.TransactionHeaders, options?: Tx.Options): Promise<DataProxyTxInfo>;
    transaction(action: 'commit', headers: Tx.TransactionHeaders, info: DataProxyTxInfo): Promise<undefined>;
    transaction(action: 'rollback', headers: Tx.TransactionHeaders, info: DataProxyTxInfo): Promise<undefined>;
    private extractHostAndApiKey;
    private mergeOverriddenDatasources;
    private resolveDatasourceURL;
    metrics(options: MetricsOptionsJson): Promise<Metrics>;
    metrics(options: MetricsOptionsPrometheus): Promise<string>;
    private withRetry;
    private handleError;
}
export {};
